        -:    0:Source:C:/Users/PC/Desktop/Bernie/Gabo/UBA/Materias/Algos I/TPI-algos-1/ejercicios.cpp
        -:    0:Graph:C:\Users\PC\Desktop\Bernie\Gabo\UBA\Materias\Algos I\TPI-algos-1\cmake-build-debug\CMakeFiles\juegoDeLaVida.dir\ejercicios.gcno
        -:    0:Data:C:\Users\PC\Desktop\Bernie\Gabo\UBA\Materias\Algos I\TPI-algos-1\cmake-build-debug\CMakeFiles\juegoDeLaVida.dir\ejercicios.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <algorithm>
        -:    2:#include "ejercicios.h"
        -:    3:
        -:    4:// EJERCICIO 1
        3:    5:bool toroideValido(vector<vector<bool>> const &t) {
        3:    5-block  0
        3:    6:    bool resp = false; // este valor puede ser cambiado de acuerdo a la propia implementacion
        -:    7:    // Implementacion
        3:    8:    return resp;
        3:    8-block  0
        -:    9:}
        -:   10:
        -:   11:// EJERCICIO 2
        1:   12:vector<posicion> posicionesVivas(toroide const &t) {
        1:   12-block  0
        1:   13:	vector<posicion> vivos;
        1:   13-block  0
        -:   14:    // Implementacion
        1:   15:    return vivos;
        -:   16:}
        -:   17:
        -:   18:// EJERCICIO 3
        1:   19:float densidadPoblacion(toroide const &t) {
        1:   19-block  0
        1:   20:	float resp = -1;
        -:   21:    // Implementacion
        1:   22:    return resp;
        1:   22-block  0
        -:   23:}
        -:   24:
        -:   25:// EJERCICIO 4
        2:   26:bool evolucionDePosicion(toroide const &t, posicion x) {
        2:   26-block  0
        2:   27:	bool resp = false;
        -:   28:    // Implementacion
        2:   29:    return resp;
        2:   29-block  0
        -:   30:}
        -:   31:
        -:   32:// EJERCICIO 5
        1:   33:void evolucionToroide(toroide &t){
        1:   33-block  0
        -:   34:    // Implementacions
        1:   35:    return;
        1:   35-block  0
        -:   36:}
        -:   37:
        -:   38:// EJERCICIO 6
        1:   39:toroide evolucionMultiple(toroide const &t, int K) {
        1:   39-block  0
        1:   40:    toroide out;
        1:   40-block  0
        -:   41:    // Implementacion
        1:   42:    return out;
        -:   43:}
        -:   44:
        -:   45:// EJERCICIO 7
        1:   46:bool esPeriodico(toroide const &t, int &p) {
        1:   46-block  0
        1:   47:    bool resp = false;
        -:   48:    // Implementacion
        1:   49:    return resp;
        1:   49-block  0
        -:   50:}
        -:   51:
        -:   52:// EJERCICIO 8
        2:   53:bool primosLejanos(toroide const &t, toroide const &u) {
        2:   53-block  0
        2:   54:	bool resp = false; 
        -:   55:    // Implementacion
        2:   56:    return resp;
        2:   56-block  0
        -:   57:}
        -:   58:
        -:   59:// EJERCICIO 9
        2:   60:int seleccionNatural(vector <toroide> ts) {
        2:   60-block  0
        2:   61:    int resp = -1; // este valor puede ser cambiado de acuerdo a la propia implementacion    
        -:   62:	// Implementacion
        2:   63:    return resp;
        2:   63-block  0
        -:   64:}
        -:   65:
        -:   66:// EJERCICIO 10
        1:   67:toroide fusionar(toroide const &t, toroide const &u) {
        1:   67-block  0
        1:   68:    toroide out;
        1:   68-block  0
        -:   69:    // Implementacion
        1:   70:    return out;
        -:   71:}
        -:   72:
        -:   73:// EJERCICIO 11
        2:   74:bool vistaTrasladada(toroide const &t, toroide const &u){
        2:   74-block  0
        2:   75:	bool resp = false;
        -:   76:    // Implementacion
        2:   77:    return resp;
        2:   77-block  0
        -:   78:}
        -:   79:
        -:   80:// EJERCICIO 12
        1:   81:int menorSuperficieViva(toroide const &t){
        1:   81-block  0
        1:   82:	int resp = -1;
        -:   83:	// Implementacion
        1:   84:	return resp;
        1:   84-block  0
        -:   85:}
